https://docs.spring.io/spring-data/jpa/docs/2.3.x-SNAPSHOT/reference/html/#reference

ORM: object relational mapping
	  Az objektumok átalakíthatóak a táblázat egyes soraivá
    A class pontos mása a táblázatnak

JPA:
	Kapcsolat a kód és az adatbázis között.
	Sql lekérdezések nélkül működik (automatizált)
	Leghíresebb implementációja a hybernate, a háttérben ez is a jdbc-t használja
	A JDBC-t automatizálja a Híbernate segítségével. Egy interface, amely meghatározza a szabályokat, feltételeket amik mellett a Hibernate használható.
	Hibernate: JDBC-t használ, automatizálja az adatbázis műveleteket, a JPA eszköze, implementációja.
	Gyors, egyszerű a használata, viszont a lekérdezések sok esetben lassabbak lehetnek, hiszen egy plusz réteg ami használja a jdbc-t. De nem minden esetben igaz, hogy lassabb, jpa chachelése miatt van amikor ez a gyorsabb. Helyzettől függ.
  Az adatbázis POJO-k-on annotációkat használunk és így tudja létrehozni az adatbázis tábla szerkezetet a jpa kód oldalról.

Haználat:
  	CrudRepository kiterjesztésével
  		○ findAll()
  		○ findFirstByOrderBy<mezo>Desc()
  		○ findBy<mezo>(String <mezo>)
  			▪ Ha az adott adattábla szerint keresünk elég a mezőnév
  		○ findAllBy<adattábla><mezo>OrderByPostedDesc(String name)
  			▪ A adattáblában keresünk, de B adattábla feltétele alapján (pl történetet keresünk blogger alapján - idegen kulcs kapcsolat van közöttük)
  		○ findAllBy<adattábla><mezo>IgnoreCaseOrderByPostedDesc(String name)
  			▪ Case-insensitive lesz

Entity:
    POJO:
    	• Plain Old Java Object
    	• osztályváltozókat, getter/settert és konstruktort tartalmaznak maximum
    	• nincs bennük általában semmilyen egyéb függvény/metódus
    	• Az adatbázishoz csinált pojo speciális -> entitásnak nevezzük, az osztály (POJO) és a benne lévő osztályváltozók képviselik az adattáblát és benne az oszlopokat, a sorok az adattáblában pedig objektumok a kódban.
    Példa:
    	• Egy adatbázis tábla neve a users, ennek egy sorából csinálunk objektumot a User osztállyal
    	• A tábla minden oszlopához kell csinálni osztályváltozót
      • Egy rekord (sor) képvisel egy objetumot
	• A jpa az entitykből automatikusan megcsinálja az adatbázis szerkezetet
	• Az Entitásban ugynazok az osztályváltozók kellenek mint amilyen oszlopok vannak az adattáblában.
	• Mivel ott használunk id-t, ezért az Entitásban is kell. Jelölnünk kell a primary key-t, foreign key meghatározásokat, auto incrementet is.
	• Az Entitásnak mindig kell legyen egy üres construktora. + @Entity annotáció az osztály fölött
	• Létrehozhatunk + public konstruktorokat is ha szükséges
	• ID autoincrement (@GeneratedValue(strategy=GenerationType.IDENTITY) annotációval állítjuk be), primary key (@Id annotációval)
	• Forign key-eket is meg kell határoznunk ha vannak.
		○ @OneToMany(mappedBy = "blogger")
		○ @ManyToOne
		○ @ManyToMany:
			Ilyenkor úgynevezett join table-t hozunk létre:
				□ egyik oldal:
				@ManyToMany(mappedBy="roles")
					private Set<User> users = new HashSet<User>();
				□ másik oldal:
				@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)
					@JoinTable(
							name="users_roles",
							joinColumns= {@JoinColumn(name="user_id")},
							inverseJoinColumns= {@JoinColumn(name="role_id")}
							)
					private Set<Role> roles = new HashSet<Role>();
	• Oszlop név módosítás: @Column(name="cím")
	• Oszlopban tárolható adat hossza: @Column(length = 1000)
	• Oszlop adattípus módosítása: @Column(columnDefinition="TEXT")
	• Oszlop értéke nem lehet null: @Column(nullable=false)
	• Oszlop értéke egyedi: @Column(unique=true)
	• Támogatja a tranzakció kezelést @Transaction annotációval. Vagyis, ha egy művelet 3-4 adatbázis műveletből állna, vagy mind megtörténik, vagy egyik sem.

H2:
	○ Ez a Spring Boot beéptett, belső adatbázisa. Teszteléshez, projekt összeállításhoz jó, ha kész minden átmenthető belőle éles adatbázisba.
	○ Minden szerver újraindításkor elvesznek belőle az adatok, mivel ez egy belső adatbázis ami a szerveren belül él.
	○ Ezért kezdő adatokat adhatunk meg a kódban:
			□ - data.sql fájlban, ezt induláskor automatikusan beolvassa
			□ - ha pl. bejövő adatokat szeretnénk elmenteni ami az űrlapról jön
	○ Működéshez application.properties: (ezzel állítjuk be, hogy elérjük böngészőben az adatbázist és hogy milyen útvonalon. Ezt csak teszteléshez szabad használni éles környezetben nem.)
		§ spring.h2.console.enabled=true
	Amikor elindítom a projektet lent kiírja milyen path-on érem el az adatbázist, ezt lehet módosítani
		§ spring.h2.console.path=/db
		§ spring.datasource.platform=h2
	○ Amikor elindítom a projektet lent kiírja milyen url-t kell a consolon beírni a jdbc url mezőbe. Ezt felül lehet írni, saját URL-t kell csinálnunk az application.propertiesben adható meg:
	Pl.:
		§ spring.datasource.url=jdbc:h2:mem:testdb
	Megadthatunk saját file útvonalat a projekten belül, ilyenkor nem vesznek el újraindításkor az adatok, mert az adatbázis az alkalmazás mellett van egy file-ben.
	Jpa-val használva megadhatjuk, hogy első futtatásnál create legyen (hozza létre az entiyket), utána csak update pl.
	Jdbc-vel használva schema.sql en adhatjuk meg a létrehozandó adatbázis szerkezetet.
		§ spring.datasource.url=jdbc:h2:file:/C:/Program Files/Java/SpringProjekt/SpringMasodik/test

Frontend:
  Templates mappába csinálunk nézeteket és ezt használjuk @Controllerrel, ahonnan dinamius adatokat tudunk átadni.
  A kettő közötti kapcsolathoz keretrendszereket használunk:
  	• JSP
  	• GSP
  	• Velocity
  	• Freemarker
    • Thymeleaf (ezt használjuk)

THYMELEAF
  pom.xml-be kell dependencyként:
  	Projekt létrehozásakor kiválaszthatjuk
  		  <dependency>
  			<groupId>org.springframework.boot</groupId>
  			<artifactId>spring-boot-starter-thymeleaf</artifactId>
  		  </dependency>
  	A Spring Security-hez van kiegészítő dependency, hogy hozzáférjen bizonyos adatokhoz:
  		<dependency>
  		    <groupId>org.thymeleaf.extras</groupId>
  		    <artifactId>thymeleaf-extras-springsecurity5</artifactId>
  		</dependency>
  	A fragmentek használatához is van egy debendency és a WebMvcConfigurer implementálásával regisztrálni kell egy Bean-t. Ehhez az osztály fölé kell a @Configuration annotáció, hogy tudjunk Bean regisztrálni :
  		<dependency>
  		<groupId>nz.net.ultraq.thymeleaf</groupId>
  		<artifactId>thymeleaf-layout-dialect</artifactId>
  		</dependency>
  	Bean regisztrálása:
  		@Bean
  		public LayoutDialect layoutDialect() {
  		  return new LayoutDialect();
  		}

  Alap használat:
  	- ha nem használunk devToolst akkor application.properties: spring.thymeleaf.cache = false ---> nem fog cachelni a böngésző.
  	- xmlns:th="http://www.thymleaf.org ---> html tagbe kell
  	A templates mappába kell legyenek a html fájlok
  	Ahhoz, hogy ezt elérjük kell a @Controller. A kommunikáció a nézet és controller között egy Model objektum segítségével történik, amit biztosít a framework.
  	Adatátadás backend oldalról: model.addAttribute("pageTitle", "Minden napra egy sztori"); A böngészőben az így átadott adat statikusként látszódik, F12-vel már nincs ott a th tag a forrásban.
  	A Local is ilyen eszköz, kommunikáció a nézet és a controller között de ezzel információat írhatunk ki a localunkról. Pl. alapértelmezett nyelv, vagy ország.

  Tagek:
  		○  th:text="${}"
  		○  th:utext="${}" --->html tartalmú szöveghez
  		○  th:href="@{}" --> pl. css útvonal, a static mappához képest kell megadni
  		○  th:each="story : ${stories}" ---> for ciklus a html-be, ha a lista eleme egy újabb objektumot tartalmaz, annak a változóira is tudunk hivatkozni, pl. story.blogger.name
  		○ th:text="${#dates.format(eredeti_datum, 'yyyy.MM.dd')}"
  		○ th:action="@{}" ---> form hová írányítson submit után
  		○ th:if="${}" --> pl akkor jelenjen meg egy elem, ha létezik a paraméter

  Fragmentek:
  	Minden honlapon vannak olyan tartalmak, amelyek nem változnak az oldalakon pl. header, menü, footer. Ezeket célszerű csak egyszer létrehozni. Erre jók a fregmentek. Ezeket bármelyik html-ben felhasználhatjuk.
  		○ kell hozzá egy plusz dependency
  		○ bean regisztráció a  WebMvcConfigurer implementálásával
  		○ namespace is minden oldalra ahol használjuk: xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout
  	Használata:
  		<html lang="hu" layout:decorate="~{layouts/main}"> - minden oldalon ahová behúzom a main-t, ami a közös elemeket tartalmazza
  		<div layout:fragment="SajatTartalom"></div> - ide jön az eltérő tartalom, amit beágyazunk a main-be

  Security-vel használata:
  	○ Ha saját login oldalt használunk, akkor a login oldalról a beérkező bejelentkezési adatokat vissza kell juttatni a spring securitynak, hogy a normál folyamatait el tudja végezni, úgy mint ha a beépített login oldalt használnánk. Ehhez olyan formra van szükség aminek 3 fix része tuti van: felhasználónév + jelszó + mentés gomb.
  Kell a thymeleaf-hoz tartozó security dependency, és a létrehozott formot tudjuk visszairányítani a securityhez.
  		th:action="@{/login}" --> így a spring securityhez kerülnek a bekért adatok
  	○ sec:authorize="isAuthenticated()" --> ezzel vizsgáljuk, hogy be van-e jelentkezve és ha igen csak akkor jelenik meg egy az adott elem a formon például.
  param.error ---> automatikusan kapjuk a securitytól, ha rossz a felhasználónév vagy a jelszó


i18n:
  Internationalization:
  	i18n (többnyelvűsítés)
  A honlap automatikusan képes felismerni a böngésző automatikus nyelvét.
  	resources alá:
  		○ messages.properties --> ez az alap
  		○ messages_en.properties --> minden kívánt nyelvhez létrehozok egyet
  		○ html-ben jelölni kell azokat az elemeket ahol használjuk:
  			th:text="#{yourIp}"
  		○ application.properties-ben beállíthatom melyik nyelv legyen az alap:
  			spring.mvc.locale-resolver=fixed ---> ez mindig kötelező
  			spring.mvc.locale=hu ---> ha ez nincs veszi a böngészőjét
  		○ böngészőben nyelvállítás: about:config --->
  			(firefox)(chromban így már nincs)
  			intl.accept_languages
  			intl.hyphenation-alias.hu-*
      ○ A messages.propertiesnek lehet baja az ékezetes karakterekkel, notepad++ ban kell átállítani a fájl karakterkódolását.

Hibakezelés:
  Javan belül van a Throwable osztály, amin belül az Error és Exception
  	•  Erroral nem foglalkozunk: rajtunk kívül álló okok: pl felhasználó gépe amin fut a JVM, nem rendelkezik elég memóriával, ami kell az én programomhoz.
  	•  Exception: Két részből állnak
                  a. Checked Exceptions --> fordítási idejű hibák, ezeket le kell kezelni, különben nem fordul le akód
                  b. Unchecked Exceptions --> futás idejű hibák

  	a. Checked:
  		Osztályok lehetnek úgy megírva hogy bizonyos esetekben dobnak exceptiont, ezt kötelező lekezelni.
  		Módja:
  		try-catch-finally
  			○ A finally nem kötelező, akár a try akár a catch futott le, amit ide írok az jön utána, mindig lefut
  			○ Egy try-hoz több catch ág is tartozhat
  		Throws
  			○ Ez arra jó, hogy átdobom a kivételt a másik szintnek, tehát nem az adott osztályban kezelem le, hanem ahol meghívom a függvényt
  	b. Unchecked
  		Olyat akarok kiiratni ami nincs, nem fog lefutni
  		Pl.:
  		○ hivatkozás egy olyan tömb elemre ami már nincs pl.
  		○ null pointer exception: Létrehozok egy új Cat-et , de nem állítok be neki nevet--> null lesz. Majd ezt megpróbálom összehasonlítani egy névvel
  if(cat.getName().equals("Aladár")) --> itt valójában a null-ra hívok equals-t
  		Kezelés módja
  			Try-catch
  			Plusz viszgáló fetételek, nem üres-e vmi pl.
  			throws
  Nagyon sok féle Exception lehet, létre lehet hozni saját exception osztályokat is, de mindegyiknek az őse a sima Exception lesz.

Kivételkezelés:
  Ha egy lekérdezés nem ad vissza eredményt, ha egy útvonalból várunk paramétert ami nincs, akkor ezeket az esetekez kezeljük kivételkezeléssel.
  A függvény neve után kell a throws Exception tag, ha benne exception dobunk
  	1. módszer
  	Létrehozhatunk neki egy saját osztályt ha pl egységesen akarjuk kezelni, és akkor a keletkezés helyén dobjuk ezeket a kivételeket (throw new Exception) az osztály pedig kezeli az összeset
  import org.springframework.ui.Model;
  import org.springframework.web.bind.annotation.ControllerAdvice;
  import org.springframework.web.bind.annotation.ExceptionHandler;
  @ControllerAdvice
  public class ExceptionGeneral {
  	@ExceptionHandler
  	public String exceptionHandler(Exception ex, Model model) {
  		model.addAttribute("exception", ex);
  		return "exceptionHandler";
  	}
  }
  2. módszer
  Az adott controlleren belül hozunk létre kivételkezelőt
  @ExceptionHandler(Exception.class)
  public String exceptionHandler(HttpServletRequest ra, Exception ex, Model model) {
  	model.addAttribute("exception", ex);
  	return "exceptionHandler";
  }

Error page:
  Hibakezelés:
  - Ha például olyan oldal elérést írunk be ami nem létezik, automatikusan kapunk egy hiba oldalt a java-tól.
  - Ezt lehet módosítani, html formázott környezetbe tenni, plusz adatokkal bővíteni
  Hiba attribútumai
  	• idő (mikor történt a hiba)
  	• status (hiba kód)
  	• error (not found)
  	• message
  	• path (milyen útvonalhoz kapcsolódóan)
  	•
  1. Egyszerű mód:
  	Beépülő megoldás: a templates-be létrehozunk egy error nevű templatet.
  	Ha ez létezik, akkor hiba esetén automatikusan ezt jeleníti meg a spring boot. Nem kell hozzá semmi más.
  	Automatikusan használható értéke:
  		th:text="${error}"
  		th:text="${message}"
  		th:text="${timestamp}
  		th:text="${path}
  		th:text="${status}"
  2. Részletes hibakezelő:
  	Ha nem csak az error-t és message-t akarjuk használni, hanem részletesebb adatokat szeretnénk, vagy magyar leírást, akkor bele lehet nyúlni az automatikus hibakezelőbe.
  	Kell hozzá egy controller
  	Ebben megadjuk, hogy hiba esetén milyen útvonalra irányítsuk a felhasználót, majd ezt egy Requestmapping-el elkapjuk és összeállítjuk a sajár hibaüzenetünket, a saját hibaoldalunkkal.
  Ha mindkét megoldás él a kódban a Controller-es az erősebb és ez fog működni



