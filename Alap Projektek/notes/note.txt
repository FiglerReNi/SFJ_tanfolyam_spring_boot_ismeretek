Java EE:
	• eredeti Oracle termék
	• csak alkalmazás szerveren futtatható: pl. glassfish, jboss, wildfly
Spring:
	• nyílt forráskódú
  • egyszerű szerveren is fut mint a Tomcat

Spring, Spring Boot:
  Spring
  	• keretrendszer,
  	• ingyenes, nyílt forráskódú
  	• modulokkal rendelkezik
  	• orm kompatibilis
  	• rest service
  	• dokumentáció: spring.io
  Spring Boot
  	Spring Boot: Springre épülő másik keretrendszer. A Springben nagyon sok mindent be kell állítani xml konfiguráción keresztül. A Spring Boot-ban nagyon sok mindent készen kapunk, amin persze lehet változtatni.
  		○ könnyen válogatható modulok
  		○ egyértelmű belépőpont (public static void main)
  		○ beépített Tomcat
  Spring Boot CLI:
  	Command line eszköz a spring boothoz, amin keresztül gyorsan lehet projekteket készíteni.The Spring Boot CLI (Command Line Interface) is a command line tool that you can use to quickly prototype with Spring. It lets you run Groovy scripts, which means that you have a familiar Java-like syntax without so much boilerplate code. You do not need to use the CLI to work with Spring Boot, but it is definitely the quickest way to get a Spring application off the ground.
  	spring help paranccsal ellenőrizzük, hogy működik-e, ehhez is megcsináljuk a környezeti változót. Előnye, hogy prototipusokat nagyon gyorsan létre lehet vele hozni.

Groovy:
  Groovy:
  	Ez is egy programozási nyelv, szintén byte kódot készít amit a JVM értelmezni tud, mint a java.
  	Kevesebb kódot kell írni, pl visszatérő értéknél nem kell használni a return szót.
  	Letöltjük a legfrisebb verziót
  	Command line-on keresztül használható program, így csinálunk hozzá környezeti változót.
  	Ha ez megvan groovy -v paranccsal ellenőrizhetjük a verziót.
  Spring cli tudja futtatni. -> spring run fájl.groovy --> tomcat szervert hoz létre automatikusan és futtatja a projektet.

Egyszerű projekt létrehozás:
  Letöltés + környezeti változó létrehozása:
  - jdk
  - tomcat
  - groovy
  - gradle
  - spring boot cli
  - maven
  - STS ide
  1. Projekt -- ElsoGroovy (létrehozás + futtatás)
  	- Létrehozunk egy hello.groovy fájlt
  	  /*Jelzi a spring számára, hogy ez egy speciális osztály, képes elkapni requesteket és választ adni rájuk.*/
  	- @RestController
  		class ThisWillActuallyRun {
  			/*Útvonal amit a felhasználó beír. Ha a / jel után nem ír semmit akkor ide fog jutni. Milyen címre érkező requesteket kap el.*/
  			@RequestMapping("/")
  			String home() {
  			"Hello World!"
  			}
  		}
  	- Lefuttatjuk a spring-el a cli-t használva. Ez letölt mindent ami szükséges a projekthez. spring run hello.groovy
  	- Indít egy tomcat szervert is a futtatáshoz, alapból a 8080 portot fogja használni, azonban ezt tudjuk módosítani:
  		spring run hello.groovy -- --server.port=9000
  2. Projekt -- ElsoJava (létrehozás)
  	- start.spring.io oldalon generáltatjuk . Csak ki kell töltenünk mit szeretnénk, milyen függőségekre van szükségünk, és legenerálja az alapot.
  	- web dependency
  	- maven csomagolót választunk --> lesz egy pom.xml a létrejövő projektben
  3. Projekt -- Demo (létrehozás)
  	- alap séma létrehozása lehet command line-ból is
  	- spring init
  	- felcsatlakozik a start.spring.io-ra és létrehoz egy demo projektet
  4. Projekt -- ElsoJava (futtatás)
  	- mvn install --> central repositoryból leszedi az összes szükséges dependencyt, és össze is állítja a .jar/.war fájlt
  	- létrehoz egy target mappát, ebben lesz a .jar fájl
  		- jar.original --> ez a programunk
  		- jar --> ez tartalmazza a függőségeket is (fat jar a neve)
  5.Projekt -- (létrehozás, futtatás)
  	- STS ide segítségével alap projektet hozunk létre:
  		- spring starter project, itt beállítjuk a dependencyket, csomagolót, java verziót
  		- package név kisbetű mindig
  		- osztály nevek nagybetűk
  	- mvn install
  	-futtatása (bemegyünk a target mappába): java -jar elsospring-0.1.jar

Csomagolás:
  A javaban a futtatható fájlok .war vagy .jar kiterjesztésűek
  	.war és .jar fájlokat csomagoló programok hoznak létre:
  		○ maven: van egy un. centrál repositorja, ahová fel vannak töltve különböző szoftvercsomagok. Ezeket tudjuk lehúzni, a pom.xml-ben határozzuk meg, hogy mire van szükségünk. bin.zip verziót töltjük le a maven-ből, hogy ne azt használjuk amit a spring ad, hanem ki tudjuk próbálni magunk.
  		○ gradle: binary only legfrisebb verziót töltjük le, ehhez is megcsináljuk a környezeti változót, command line verzió ellenőrzés gradle -v; ez groovy alapú, pom.xml helyett egy json szerű fájlt használ
  		○ ant:  legrégebbi
  	Ezek csomagolnak, lefordíttatnak a compilerrel, beszerzik a dependenciákat
  A spring meg tudja kérni a mavent közvetlenül a csomagolásra, így ezzel nem kell foglalkoznunk, de manuálisan is lehet használni.

Futtatás:
   .war: ha van egy ilyen fájlunk és bemásoljuk a tomcat webapps mappájába, akkor a tomcat indulásakor kicsomagolja ezt a fájlt olyan szerkezetűvé mint amilyen a saját példa alkalmazásunk volt és futtatja. A tomcat oldalán a manager appban van egy rész, ahol tallózva is betehetünk .war filet és a deployra nyomva el is kezdi kicsomagolni a tomcat és a megfelelő helyre teszi.
   .jar:  java -jar elsospring-0.1.jar

Projektek fajtái:
  	1. Frontend és backend együtt:
  		MVC struktúra
  		Weblaprendszerekhez a sima @Controller - nézet párost szokták használni, mivel formázott html-t kell nagyrészt visszaadni
  		Például thymeleaf segítségével a frontend oldalról, backend oldalról pedig @Controller, @RequestMapping("/tortenetek") és a Model segítségével.
  	2. Webservie-k
  		Frontend és backend elválik, szerver szinten is.
  		Backend json vagy xml-t ad vissza.
  		Frontend pl angularban vagy reactben írva fogadja ezeket, illetve kéréseket intéz a a webservice-hez, amire json/xml választ kap.
  		A backend részről pedig csak kiadjuk az adatot @RestController, @RequestMapping("/tortenetek"), @JsonBackReference (idegen kulcs esetén fontos, amikor egyik objektumba ágyazódik a másik) segítségével. Ilyenkor egy json-t adunk át, vagy xml-t, esetleg sima text-et, amit a frontend feldolgoz.
  	3. API
  		Olyan alkalmazások, amiket mások meg tudna hívni. Pl egy árfolyam kereső, ami megkeresi a legjobb árfolyamot, de nem egy honlapra vezeti ki, hanem más alkalmazások tudják meghívni (web jar-ban kell megcsinálni). Ilyenek a maven central repositoryban lévő meghívható alkalmazások is, pl. jdbc, ide a sajátunkat is feltölthetjük
  		@RestController-t használjuk ezekhez, mert ott elég adatot visszaadni sok esetben. Pl. json, xml stb.

MVC(Modell-View-Controller):
  	• nézet: valahogy ki fog nézni az alkalmazás. Weblapon például ugyanez a html. Célja, hogy a felhasználó lássa az információkat.
  	• kontroller: a 'gondolkodó' rész, ez felel a kalkulációkért. Megkapja a nézettől az adatokat (pl input box értékei), ebben a rétegben írjuk meg, mi hogyan történjen. Irányítja a logikát. Kommunikál a modellel, és a nézettel is.
    • modell: az információk el legyenek tárolva, ezért felelős --> össze van kötve az adatbázissal. Előnye ha adatbázison módosítok pl mysql-ről oracle-re, akkor csak a modellen kell módosítani. Visszaadja a szüséges információt a kontrollernek. Ha olyan programot írunk aminek nem kell semmilyen adatot tárolnia nem lesz ilyen rétegünk (nem kötelező)

SERVICE:
  Webservice:
  	xml/json válaszokat képes adni, a webapplication és az adatbázis között áll. Vagy egy mobilalkalmazás esetén közvetlenül a kliens (mobilalkalmazás) és az adatbázis között. Előnye: van egy weblapunk, egy mobilalkalmazásunk és mindkettő ugyanabból az adatbázisból dolgozik, mindkettő ugyanattól a webservicetől tud adatot kérni. A webservice kommunikál az adatbázissal és visszaadja a kért adatot. Közvetlenül az adatbázishoz így nem adunk hozzáférést. Egységes autentikáció lehet minden felületről, lehet rendszerezni ki hogyan fér hozzá az adatbázishoz. Ki milyen adatokat kérhet le.
  Webapplication:
  	a klienssel áll kapcsolatban -> pl. böngésző és html+css+js választ ad.
  Microservice:
  	A webserviceben lévő funkciókat szétszedjük  ún. microservicekre, így külön lehet őket kezelni, például teljesítmény/erőforrás szempontjából (skálázhatóság), vagy hogy milyen kliensről érjék el. Önmagában egy egység, egy adott feladatért felelős kis webservice. Így loosly coupled lesz a rendszerünk, ezeket tesztelni is sokkal könnyebb, hiszen a microservicek önmagukban egy egységek.
  	Webservice elérése két féleképp (ezek eljárások, hogy adatot kérhessünk a szervertől):
  		○ rest
  		○ soap (protokoll)

Spring Projekt Felépítés:
  Projekt felépítése:
  MVC:
  	• Nézet(View):
  		○ Static: image, css, js, statikus html oldalak, amiket nem controllerből hívunk, pl ha így csinálunk egy index.html-t. Külön mappába szokták rendezni a képeket pl a html-től a staticon belül
  		○ Templates: html thymeleaf-el
  	• Controller: két része lesz:
  		○ Controller: információ begyűjtése és visszavitele a nézet felé
  			§ alap: nézetet keres amit visszaad, oldalakra irányít
  			§ rest: adatot ad vissza egyből, json, xml
  		○ Service: üzleti logika, kalkulációk, számítások a kapott adatokból, még mielőtt elküldenénk az adatbázisnak vagy mielőtt visszaküldenénk. Ez kommunikál a repositoryval is
  		○ Config – ez a különféle beállításoknak kell, pl a Securityhez.
  		○ Utils - segítő osztályok, pl. Random generálás
  	• Model
  		○ Domain (Model): ebbe kerülnek a POJO-kalkulációk + Entity
  		○ Repository: az adatbázissal kommunikál, minden entity-hez külön repository tartozik, ezek a fájlok nem classok, hanem interfacek lesznek, amik kiterjesztik a CrudRepository-t, amiben egy csomó előre megírt dolog van, amit tudunk használni és módosítani. Az adatbázissal kommunikál, ide kerülnek az sql-ek, illetve beépített sql lehetőségek
  Ennek megfelelően létrehozunk egy fő packaget, és ez alatt létrehozunk sub package-ket, hogy külön tudjuk tenni a controllert és a service-ket. Azért csináljuk így, mert a @componentscan csak az adott package-ben keresi a beaneket, ha nem írjuk felül. Így egy package-ben lesznek de mégis külön logikailag.
  Adatáramlás:
  Adatbázis -> Entity -> Repository -> Service -> Controller -> Felület


