application.properties: A java kód kapcsolata a külvilággal. A kód újrafordítása nélkül változtatható. Ebben határozhatjuk meg pl. az adatbázis kapcsolódás adatait, vagy az email server adatait. A .jar file mellett szokták létrehozni. Alap esetben a .jar file is tartalmaz egyet, és ha nincs külső meghatározva, akkor az ebben lévő adatokat használja a program. De célszerű külsőt létrehozni, és a belső maximum a környezetnek megfelelő változókat hív meg a külső property file-ból.
Olyan helyre célszerű tenni, ahol nem érheti el a felhasználó:
	- kitesszük a .jar file mellé
	- elmentem valahová a szerveren és class pathon keresztül adom meg
	- környezeti változóba teszem a helyét és így adom át.
Hierarchia:
	- belső application.properties (.jar belül): itt keres legelőször, ha itt nem talál akkor megy tovább
	- külső application.properties (.jar mellett)
	- profil alapú konfiguráció
	- OS környezeti változói
	- Java System Properties
	- JNDI attribútumok (java:comp/env)
	- cmd parancssor (terminál: pl ha van portbeállítás a properties-ben, de itt megadok valami mást, ezt fogja használni)
Adatok beírása:
	Bármilyen szerkezetet kitalálhatunk, a . -ok egységeket különböztetnek meg.
	common.database.username = admin;
	portbeállítás: server.port = 9001
application.yaml: ugyanazt tudja, csak más formátumban adom meg az adatokat. A properties az erősebb, ha mindkettőben benne van egy adat pl. username, azt használja amelyik a properties-ben van.
	common:
		database:
			username: admin
CMD-ből futtatva, a properties-ben lévő port felülírása: 
	tartalmazó mappa: mvn package 
	target mappa: java -jar springproject-0.1.jar //így a properties-ben lévő porton indítja
				  java -Dserver.port=8090 -jar springproject-0.1.jar
A konfigurációs fájlokban nem csak konstans értékeket adhatunk meg.
	pl.: ${random.value}  - csak egyszer fog értéket generálni és mindig azt adja vissza, számok+betűk
		 ${random.int} - csak szám
		 ${random.long} - csak szám
		 ${random.int{0,100}} - csak szám, tartományon belül
		 
Csoportos konfiguráció: Ha például egy pojo változóihoz állítunk be értékeket a properties-ben, meg lehet csinálni azt, hogy nem egyesével kötjük össze a @Value annotációval. Fontos, hogy a propertiesben a változó nevek ugyanígy szerepeljenek, mint a pojo-ban, vagy kötőjellel: firstName vagy first-name. Ahhot, hogy működjön a POJO-nak bean-nek kell lennie. @EnableConfigurationProperties annotáció: így összeköthetünk csoportosan osztályváltozókat a properties-ben lévő értékekkel. @ConfigurationProperties-el mondom meg mivel akarom összekötni az osztályváltozókat a properties-ből.
@ConfigurationProperties(prefix = "person")
Setteren keresztül injektálja be az értékeket.
A propertiesben egy másik property értékére is hivatkozhatunk és fűzhetünk is hozzá.
	person-plus.firstname = Renáta
	person-plus.lastname = ${person-plus.firstname} Figler
A pom.xml-hez is hozzá kell adni egy dependency-t, hogy működjön. Ez az újabb verziókban alapból benne van.

Profilok: Különböző környezetekben különböző módon használjuk az alkalmazásunkat. Pl. más adatbázishoz kapcsolódunk teszten mint élesen. Vagy azt szeretnénk ha működne oracle és postgresql-el is a programunk, és kiveszi a properties-ből a megfelelő beállításokat. Igy mindkét környezetnek kell építeni egy profilt, hogy működjön. Minden környezetnek csinálunk egy application.properties fájlt. Az eredetiben pedig beállítjuk, hogy melyik aktív. Amelyiket aktívra állítom, onnan fog értékeket venni.
A profilokból az értékeket használhatjuk osztályokon belül, ha bean-ek, vagy a mainben is létrehozhatunk egy bean példányt az osztályból, ha alapból nem az.

Command line használata IDE-n belül: Jobb egérgom a projekten -> run as -> run configurations:
	Spring Boot fülön látja a profilunkat, lehet állítani.
	Arguments fülön program argumentumént is átadhatjuk: --spring.profiles.active=prod