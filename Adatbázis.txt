Két új dependency kell a projektbe
 - jpa
	 <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>2.1.4.RELEASE</version>
     </dependency>
 - h2
	 <dependency>
	    <groupId>com.h2database</groupId>
	    <artifactId>h2</artifactId>
		<scope>runtime</scope>
		<version>1.4.199</version>
	 </dependency>
 
Fogalmak:
	ORM: object relational mapping
		 Az objektumok átalakíthatóak a táblázat egyes soraivá
		 A class pontos mása a táblázatnak
		 
	JPA: A JDBC-t automatizálja a Híbernate segítségével. Egy interface, amely meghatározza a szabályokat, feltételeket amik mellett a Hibernate használható.
	
	Hibernate: JDBC-t használ, automatizálja az adatbázis műveleteket, a JPA eszköze, implementációja.
	
	JDBC: Kapcsolat és kommunikáció az adatbázissal sql nyelvet használva.
	
	H2 - Embedded database, ez a Spring Boot beéptett, belső adatbázisa. Teszteléshez, projekt összeállításhoz jó, ha kész minden átmenthető belőle éles adatbázisba.
	Minden szerver újraindításkor elvesznek belőle az adatok, mivel ez egy belső adatbázis ami a szerveren belül él.
	Ezért kezdő adatokat adhatunk meg a kódban:
		- data.sql fájlban, ezt induláskor automatikusan beolvassa
	Működéshez application.properties: (ezzel állítjuk be, hogy elérjük böngészőben az adatbázist és hogy milyen útvonalon. Ezt csak teszteléshez szabad használni éles környezetben nem.)
		- spring.h2.console.enabled=true
		- spring.h2.console.path=/db
				felületen URL: saját URL-t kell csinálnunk az application.propertiesben adható meg:
				spring.datasource.url=jdbc:h2:file:/C:/Program Files/Java/SpringProjekt/SpringMasodik/test
				
Adatbázis - Kód: 
	- Ha mr van meglévő adatbázis, hozzá tudjuk kötni a kódot
	- Ha nincs, tudjuk azt mondani a kódban, hogy mi legyen az adatbázis definíciója, és ha még nincs létrehozza
	- Az osztály (POJO) és a benne lévő osztályváltozók képviselik az adattáblát és benne az oszlopokat. Az ilyen POJO az entitás.
	- A sorok az adattáblában pedig objektumok a kódban.
	
Entity:
	- Az Entitásban ugynazok az osztályváltozók kellenek mint amilyen oszlopok vannak az adattáblában. Mivel ott használunk id-t, ezért az Entitásban is kell. Jelölnünk kell a primary key-t, foreign key meghatározásokat, auto incrementet is.
	- Az Entitásnak mindig kell legyen egy private üres construktora. + @Entity annotáció az osztály fölött
	- ID autoincrement (@GeneratedValue(strategy=GenerationType.IDENTITY) annotációval állítjuk be), primary key (@Id annotációval)
	- Forign key-eket is meg kell határoznunk ha vannak.
	
Repository:
	- Ilyen package-t hozunk létre és ebben lesznek ezek a fájlok. 
		- Minden entity-hez külön repository tartozik, ezek a fájlok nem classok, hanem interfacek lesznek, amik kiterjesztik a 
		CrudRepository-t, amiben egy csomó előre megírt dolog van amit tudunk használni és módosítani
	- Az adatbázissal kommunikál, ide kerülnek az sql-ek, illetve beépített sql lehetőségek
	