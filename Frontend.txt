Több lehetőség is van, attól függően, hogy statikus vagy dinamikus datok kerülnek a honlapomra.
Amikor létrehozok egy alap projektet és semmi nincs benne még, akkor a localhost:8080-re egy error page jön be, hiszen nem csináltunk még semmilyen nézetet, amit meg tudna jeleníteni. Az alap hiba oldalt lehet módosítani. Ezt látja a felhasználó is, ha olyan aloldalt keres ami nem létezik.
A nézet részei a resources mappába kerülnek:
	- static: ebbe minden ami statikus, pl. kép, video, css, html is ha statikus weboldalt hozunk létre. Ami ebben a mappában van az meg tud jelenni a felhasználónál. Az index.html ha van mindig a főoldal lesz, amit megtalál egyből a localhost:8080.
	
1. példa: Static mappában index.html ---> megjelenik felületen a tartalma
	      Majd létrehozunk egy RestController-t ami képes útvonalakat figyelni a RequestMapping-el és választ adni rájuk. Ebben az esetben,ha ez is a gyökér könyvtárat figyeli, a RestController nyer, és ez fog megjelenni a statikus html-el szemben.

2. példa: Ha sima Controllert használunk RequestMapping-el, akkor sem fog megjelenni a statikus index.html, hanem ilyenkor a return után írt névvel keres egy nézetet a program amit megjeleníthet. Ha ilyen nincs akkor hibát ad.

Weblaprendszerekhez a sima Controller - nézet párost szokták használni, mivel formázott html-t kell nagyrészt visszaadni.
API-okhoz a RestController-t, mert ott elég adatot visszaadni sok esetben. Pl. json, xml stb.

API - olyan alkalmazások, amiket mások meg tudna hívni. Pl egy árfolyam kereső, ami megkeresi a legjobb árfolyamot, de nem egy honlapra vezeti ki, hanem más alkalmazások tudják meghívni (web jar-ban kell megcsinálni). Ilyenek a maven central repositoryban lévő meghívható alkalmazások is, pl. jdbc

3. példa: templates mappába csinálunk nézeteket és ezt használjuk Controllerrel, ahonnan dinamius adatokat tudunk átadni.
	A kettő közötti kapcsolathoz keretrendszereket használunk:
		- JSP
		- GSP
		- Velocity
		- Freemarker
		- Thymeleaf (ezt használjuk)
		
Thymeleaf:
	pom.xml-be kell dependencyként: 
		- projekt létrehozásakor kiválaszthatjuk
		- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		  </dependency>
		- ha nem használunk devToolst akkor application.properties: spring.thymeleaf.cache = false ---> nem fog cachelni a 	böngésző.
		- xmlns:th="http://www.thymleaf.org ---> html tagbe kell
	A templates mappába kell legyenek a html fájlok
	Ahhoz, hogy ezt elérjük kell a Controller. A kommunikáció a nézet és controller között egy Model objektum segítségével történik, amit biztosít a framework. A Local is ilyen eszköz, ezzel információat írhatunk ki a localunkról. Pl. alapértelmezett nyelv, vagy ország.
	Tagek:  th:text="${}"
			th:utext="${}" --->html tartalmú szöveghez
			th:href="@{}"
			th:each="story : ${stories}" ---> for ciklus a html-be
		    th:text="${#dates.format(eredeti_datum, 'yyyy.MM.dd')}"

Internationalization: 
	i18n (többnyelvűsítés)
	A honlap automatikusan képes felismerni a böngésző automatikus nyelvét.
	resources alá:
		- messages.properties --> ez az alap
		- messages_en.properties --> minden kívánt nyelvhez létrehozok egyet
		- html-ben jelölni kell azokat az elemeket ahol használjuk:
			th:text="#{yourIp}"
		- application.properties-ben beállíthatom melyik nyelv legyen az alap:
			spring.mvc.locale-resolver=fixed ---> ez mindig kötelező
			spring.mvc.locale=hu ---> ha ez nincs veszi a böngészőjét
		böngészőben nyelvállítás: about:config ---> 
			(firefox)(chromban így már nincs)
			intl.accept_languages
			intl.hyphenation-alias.hu-*
	A messages.propertiesnek lehet baja az ékezetes karakterekkel, notepad++ ban kell átállítani a fájl karakterkódolását.		
